var request = require('supertest')
  , path = require('path')
  , chai = require('chai')
  , should = chai.should()
  , expect = chai.expect()
  , app = require('../../app').app
  , http = require('http')
  , newUserId
  , port = 3000
  , server
  , request = request('http://localhost:'+port);

var createJSON = {
  name: 'Alex',
  email: 'alex@dsol.com.br',  
}

var updateJSON = {
  name: 'Alex Dev',
  email: 'dev@alexferreira.eti.br',  
}

function startServer(done) {
  server = http.createServer(app).listen(port);

  server.on("listening", function() {
    done();
  });
}

function stopServer(done) {
  server.close();
    done();
}

describe('Users', function(){
  beforeEach(startServer);
  afterEach(stopServer);

  it('GET Should return all users when calling /users.json', function(done){
    request
      .get('/users.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(200, done);
  });

  it('POST Should create a new User', function(done){
    request
      .post('/users.json')
      .send(createJSON)
      .expect(201)
      .end(function(err, res){
        if (err) throw err;
        var obj = res.body;
        newUserId = obj._id;

        obj.should.have.property('_id', newUserId);
        obj.should.have.property('name', createJSON.name);
        obj.should.have.property('email', createJSON.email);

        done();
      });
  });

  it('GET Should return a single User when calling /users/{ID}.json', function(done){
    request
      .get('/users/'+newUserId+'.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(200)
      .end(function(err, res){
        if (err) throw err;
        var obj = res.body;

        obj.should.have.property('_id', newUserId);
        obj.should.have.property('name', createJSON.name);
        obj.should.have.property('email', createJSON.email);

        done();
      });
  });

  it('GET Should return a 404 when calling /users/{ID}.json with an ID that doesn\'t exist', function(done){
    request
      .get('/users/xxxxxxxxxxxxxxxx.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(500, done);
  });

  it('PUT Should update an existing User when calling /users/{ID}.json', function(done){
    request
      .put('/users/'+newUserId+'.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .send(updateJSON)
      .expect(200)
      .end(function(err, res){
        if (err) throw err;
        var obj = res.body;

        obj.should.have.property('_id', newUserId);
        obj.should.have.property('name', updateJSON.name);
        obj.should.have.property('email', updateJSON.email);

        done();
      });
  });

  it('PUT Should return 500 when trying to Update User That Doesn\'t Exist', function(done){
    request
    .put('/users/xxxxxxxxxxxxxxxx.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .send(updateJSON)
      .expect(500, done);
  });

  it('DELETE Should delete person when calling /users/{ID}.json', function(done){
    request
      .del('/users/'+newUserId+'.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(200, done);
  });

  it('DELETE Should return a 500 when calling /users/{ID}.json with an ID that doesn\'t exist', function(done){
    request
      .del('/users/xxxxxxxxxxxxxxxx.json')
      .set('Accept', 'application/json')
      .expect('Content-Type', /json/)
      .expect(500, done);
  });
})